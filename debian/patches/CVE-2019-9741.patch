Origin: https://github.com/golang/go/commit/829c5df58694b3345cb5ea41206783c8ccf5c3ca
Origin: https://github.com/golang/go/commit/f1d662f34788f4a5f087581d0951cdf4e0f6e708
Reviewed-by: Sylvain Beucler <beuc@debian.org>
Last-Update: 2021-03-12

From 829c5df58694b3345cb5ea41206783c8ccf5c3ca Mon Sep 17 00:00:00 2001
From: Brad Fitzpatrick <bradfitz@golang.org>
Date: Wed, 23 Jan 2019 19:09:07 +0000
Subject: [PATCH] net/url, net/http: reject control characters in URLs

This is a more conservative version of the reverted CL 99135 (which
was reverted in CL 137716)

The net/url part rejects URLs with ASCII CTLs from being parsed and
the net/http part rejects writing them if a bogus url.URL is
constructed otherwise.

Updates #27302
Updates #22907

Change-Id: I09a2212eb74c63db575223277aec363c55421ed8
Reviewed-on: https://go-review.googlesource.com/c/159157
Run-TryBot: Brad Fitzpatrick <bradfitz@golang.org>
TryBot-Result: Gobot Gobot <gobot@golang.org>
Reviewed-by: Filippo Valsorda <filippo@golang.org>
---
 src/net/http/fs_test.go           | 15 +++++++++++----
 src/net/http/http.go              |  6 ++++++
 src/net/http/request.go           |  7 ++++++-
 src/net/http/requestwrite_test.go | 11 +++++++++++
 src/net/url/url.go                | 10 ++++++++++
 src/net/url/url_test.go           | 17 ++++++++++++++++-
 6 files changed, 60 insertions(+), 6 deletions(-)

From f1d662f34788f4a5f087581d0951cdf4e0f6e708 Mon Sep 17 00:00:00 2001
From: Brad Fitzpatrick <bradfitz@golang.org>
Date: Tue, 29 Jan 2019 17:22:36 +0000
Subject: [PATCH] net/url, net/http: relax CTL-in-URL validation to only ASCII
 CTLs

CL 159157 was doing UTF-8 decoding of URLs. URLs aren't really UTF-8,
even if sometimes they are in some contexts.

Instead, only reject ASCII CTLs.

Updates #27302
Updates #22907

Change-Id: Ibd64efa5d3a93263d175aadf1c9f87deb4670c62
Reviewed-on: https://go-review.googlesource.com/c/160178
Run-TryBot: Brad Fitzpatrick <bradfitz@golang.org>
TryBot-Result: Gobot Gobot <gobot@golang.org>
Reviewed-by: Ian Lance Taylor <iant@golang.org>
---
 src/net/http/http.go    | 13 +++++++++----
 src/net/http/request.go |  2 +-
 src/net/url/url.go      | 15 ++++++++++-----
 src/net/url/url_test.go |  6 ++++++
 4 files changed, 26 insertions(+), 10 deletions(-)

Index: golang-1.8-1.8.1/src/net/http/fs_test.go
===================================================================
--- golang-1.8-1.8.1.orig/src/net/http/fs_test.go
+++ golang-1.8-1.8.1/src/net/http/fs_test.go
@@ -582,16 +582,23 @@ func TestFileServerZeroByte(t *testing.T
 	ts := httptest.NewServer(FileServer(Dir(".")))
 	defer ts.Close()
 
-	res, err := Get(ts.URL + "/..\x00")
+	c, err := net.Dial("tcp", ts.Listener.Addr().String())
 	if err != nil {
 		t.Fatal(err)
 	}
-	b, err := ioutil.ReadAll(res.Body)
+	defer c.Close()
+	_, err = fmt.Fprintf(c, "GET /..\x00 HTTP/1.0\r\n\r\n")
 	if err != nil {
-		t.Fatal("reading Body:", err)
+		t.Fatal(err)
+	}
+	var got bytes.Buffer
+	bufr := bufio.NewReader(io.TeeReader(c, &got))
+	res, err := ReadResponse(bufr, nil)
+	if err != nil {
+		t.Fatal("ReadResponse: ", err)
 	}
 	if res.StatusCode == 200 {
-		t.Errorf("got status 200; want an error. Body is:\n%s", string(b))
+		t.Errorf("got status 200; want an error. Body is:\n%s", got.Bytes())
 	}
 }
 
Index: golang-1.8-1.8.1/src/net/http/http.go
===================================================================
--- golang-1.8-1.8.1.orig/src/net/http/http.go
+++ golang-1.8-1.8.1/src/net/http/http.go
@@ -59,6 +59,17 @@ func isASCII(s string) bool {
 	return true
 }
 
+// stringContainsCTLByte reports whether s contains any ASCII control character.
+func stringContainsCTLByte(s string) bool {
+	for i := 0; i < len(s); i++ {
+		b := s[i]
+		if b < ' ' || b == 0x7f {
+			return true
+		}
+	}
+	return false
+}
+
 func hexEscapeNonASCII(s string) string {
 	newLen := 0
 	for i := 0; i < len(s); i++ {
Index: golang-1.8-1.8.1/src/net/http/request.go
===================================================================
--- golang-1.8-1.8.1.orig/src/net/http/request.go
+++ golang-1.8-1.8.1/src/net/http/request.go
@@ -528,7 +528,12 @@ func (req *Request) write(w io.Writer, u
 		// CONNECT requests normally give just the host and port, not a full URL.
 		ruri = host
 	}
-	// TODO(bradfitz): escape at least newlines in ruri?
+	if stringContainsCTLByte(ruri) {
+		return errors.New("net/http: can't write control character in Request.URL")
+	}
+	// TODO: validate r.Method too? At least it's less likely to
+	// come from an attacker (more likely to be a constant in
+	// code).
 
 	// Wrap the writer in a bufio Writer if it's not already buffered.
 	// Don't always call NewWriter, as that forces a bytes.Buffer
Index: golang-1.8-1.8.1/src/net/http/requestwrite_test.go
===================================================================
--- golang-1.8-1.8.1.orig/src/net/http/requestwrite_test.go
+++ golang-1.8-1.8.1/src/net/http/requestwrite_test.go
@@ -512,6 +512,17 @@ var reqWriteTests = []reqWriteTest{
 			"User-Agent: Go-http-client/1.1\r\n" +
 			"\r\n",
 	},
+
+	21: {
+		Req: Request{
+			Method: "GET",
+			URL: &url.URL{
+				Host:     "www.example.com",
+				RawQuery: "new\nline", // or any CTL
+			},
+		},
+		WantError: errors.New("net/http: can't write control character in Request.URL"),
+	},
 }
 
 func TestRequestWrite(t *testing.T) {
Index: golang-1.8-1.8.1/src/net/url/url.go
===================================================================
--- golang-1.8-1.8.1.orig/src/net/url/url.go
+++ golang-1.8-1.8.1/src/net/url/url.go
@@ -470,6 +470,10 @@ func parse(rawurl string, viaRequest boo
 	var rest string
 	var err error
 
+	if stringContainsCTLByte(rawurl) {
+		return nil, errors.New("net/url: invalid control character in URL")
+	}
+
 	if rawurl == "" && viaRequest {
 		return nil, errors.New("empty url")
 	}
@@ -1054,3 +1058,14 @@ func (u *URL) UnmarshalBinary(text []byt
 	*u = *u1
 	return nil
 }
+
+// stringContainsCTLByte reports whether s contains any ASCII control character.
+func stringContainsCTLByte(s string) bool {
+	for i := 0; i < len(s); i++ {
+		b := s[i]
+		if b < ' ' || b == 0x7f {
+			return true
+		}
+	}
+	return false
+}
Index: golang-1.8-1.8.1/src/net/url/url_test.go
===================================================================
--- golang-1.8-1.8.1.orig/src/net/url/url_test.go
+++ golang-1.8-1.8.1/src/net/url/url_test.go
@@ -1631,6 +1631,12 @@ func TestURLPort(t *testing.T) {
 			t.Errorf("Port for Host %q = %q; want %q", tt.host, got, tt.want)
 		}
 	}
+
+	// But don't reject non-ASCII CTLs, at least for now:
+	if _, err := Parse("http://foo.com/ctl\x80"); err != nil {
+		t.Errorf("error parsing URL with non-ASCII control byte: %v", err)
+	}
+
 }
 
 var _ encodingPkg.BinaryMarshaler = (*URL)(nil)
@@ -1683,3 +1689,18 @@ func TestGob(t *testing.T) {
 		t.Errorf("json decoded to: %s\nwant: %s\n", u1, u)
 	}
 }
+
+func TestRejectControlCharacters(t *testing.T) {
+	tests := []string{
+		"http://foo.com/?foo\nbar",
+		"http\r://foo.com/",
+		"http://foo\x7f.com/",
+	}
+	for _, s := range tests {
+		_, err := Parse(s)
+		const wantSub = "net/url: invalid control character in URL"
+		if got := fmt.Sprint(err); !strings.Contains(got, wantSub) {
+			t.Errorf("Parse(%q) error = %q; want substring %q", s, got, wantSub)
+		}
+	}
+}
